@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0
skinparam linetype polyline

' Additions
GBoard "1"-u->"2..32" Piece: has
Piece "1" --> "0..1" GCell : is ob
GCell "64" --> "1" GBoard : belongs to
' REMOVE

' ENDSTATIC

class GBoard {
	- {static} BOARD_SIZE: int
	- board: HashMap<GCell,Piece>
	- {static} events: EEventSrc
	- kings: Kings
	+ addPiece(p: Piece): void
	+ removePiece(cell: GCell): Piece
	+ movePiece(to: GCell, p: Piece): Piece
	+ clearBoard(): void
	+ getBoard(): HashMap<GCell,Piece>
	+ resetTargetPassant(color: PlayerColor): void
	- isEmptyBetween(path: List<GCell>): boolean
	+ move(fromRow: int, fromCol: int, toRow: int, toCol: int, color: PlayerColor): boolean
	+ initBoard(): void
	+ updatePromotion(p: Pawn): void
	+ updatePieceTo(pawn: Pawn, cell: GCell): Piece
	+ updateEnPassant(cell: GCell): void
	+ updateCastling(king: King, rook: Rook, direction: int): void
}


class GBoard$Kings {
	- whiteKing: King
	- blackKing: King
	~ getKing(color: PlayerColor): King
	~ IsCheck(): King
}


interface BObserver {
	+ updatePromotion(pawn: Pawn): void
	+ updatePieceTo(pawn: Pawn, cell: GCell): Piece
	+ updateEnPassant(cell: GCell): void
	+ updateCastling(king: King, rook: Rook, direction: int): void
}

class Bishop {
	+ canMove(to: GCell): boolean
	+ path(to: GCell): List<GCell>
}

interface EObserver {
	+ updateRemovePiece(cell: GCell): void
	+ updateAddPiece(piece: Piece): void
	+ updateNextTurn(): void
	+ updatePopUp(p: Piece): Piece
	+ updateInCheck(color: PlayerColor): void
}

abstract class Piece {
	# type: PieceType
	# color: PlayerColor
	# cell: GCell
	+ canMove(to: GCell): boolean
	+ getType(): PieceType
	+ getColor(): PlayerColor
	+ getCell(): GCell
	+ setCell(cell: GCell): void
	+ {abstract}path(to: GCell): List<GCell>
	+ getHasMoved(): boolean
	+ textValue(): String
	+ toString(): String
	+ equals(o: Object): boolean
	+ hashCode(): int
}


abstract class BEventSrc {
	- obs: BObserver
	+ attach(mobs: BObserver): void
	+ notifyPromotion(pawn: Pawn): void
	+ notifyPieceTo(pawn: Pawn, cell: GCell): Piece
	+ notifyEnPassant(cell: GCell): void
	+ notifyCastling(king: King, rook: Rook, direction: int): void
}


class Pawn {
	- hasMoved: boolean
	- events: BEventSrc
	- canEnPassant: boolean
	+ getHasMoved(): boolean
	+ checkEnPassant(to: GCell): boolean
	+ getCanEnPassant(): boolean
	+ updateCanEnPassant(dis: int): void
	+ checkPromoted(to: GCell): void
	+ path(to: GCell): List<GCell>
	+ canMove(to: GCell): boolean
}


class Knight {
	+ canMove(to: GCell): boolean
	+ path(to: GCell): List<GCell>
}

class GCell {
	- row: int
	- col: int
	+ getRow(): int
	+ getCol(): int
	+ distanceRow(to: GCell): int
	+ distanceCol(to: GCell): int
	+ directionRow(to: GCell): int
	+ directionCol(to: GCell): int
	+ equals(o: Object): boolean
	+ hashCode(): int
	+ toString(): String
}


class Queen {
	+ canMove(to: GCell): boolean
	+ path(to: GCell): List<GCell>
}

class Rook {
	- hasMoved: boolean
	+ hasMoved(): boolean
	+ textValue(): String
	+ canMove(to: GCell): boolean
	+ path(to: GCell): List<GCell>
}


abstract class EEventSrc {
	- obs: EObserver
	+ attach(observer: EObserver): void
	+ updateRemovePiece(cell: GCell): void
	+ updateAddPiece(piece: Piece): void
	+ updateNextTurn(): void
	+ updatePopUp(p: Piece): Piece
	+ updateInCheck(color: PlayerColor): void
}


class CEngine {
	- view: ChessView
	- board: GBoard
	- turn: int
	- playerTurn(): PlayerColor
	- displayMessage(): void
	- nextTurn(): void
	+ updateNextTurn(): void
	+ start(view: ChessView): void
	+ updatePopUp(p: Piece): Piece
	+ newGame(): void
	+ move(fromRow: int, fromCol: int, toRow: int, toCol: int): boolean
	+ updateAddPiece(p: Piece): void
	+ updateRemovePiece(cell: GCell): void
	+ updateInCheck(color: PlayerColor): void
}


class King {
	- {static} ROOK_INITIAL_COL_LEFT: int
	- {static} ROOK_INITIAL_COL_RIGHT: int
	- hasMoved: boolean
	- isCheck: boolean
	- board: HashMap<GCell,Piece>
	- events: BEventSrc
	+ getIsCheck(): boolean
	+ setIsCheck(state: boolean): void
	+ isCheck(): boolean
	+ castling(to: GCell): boolean
	+ path(to: GCell): List<GCell>
	+ canMove(to: GCell): boolean
}




BObserver <|.. GBoard
GBoard +-- GBoard$Kings
Piece <|-- Bishop
UserChoice <|.. Piece
Piece <|-- Pawn
Piece <|-- Knight
Piece <|-- Queen
Piece <|-- Rook
ChessController <|.. CEngine
EObserver <|.. CEngine
Piece <|-- King
@enduml
